---
title: Homework 7 - Creating a resume database
author: Emmanuella Asomani
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document contains a crow's foot diagram, which was created using the mermaid library and the database schema, to show the relationship between the tables: people, skills, roles. It also contains code to execute SQL queries and dsplay the results. The document also has a reflection section to express our experience and thoughts about the assignment.


GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-ellaasomani>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The goal of this project is to create a company-wide database for a company consisting of designers and developers.
This database will store the skills, certifications, and roles of all employees, including the team of designers and developers. The ultimate goal is to be able identify employees with particular skills, display the skills of any employee, and identify skill gaps within specific job roles, ultimately assisting in talent management and project allocation.The database includes tables for skills, people, roles, peopleskills (representing the skills acquired by each person), and peopleroles (representing the roles assigned to each person). The database defines the structure of these tables, assigns primary keys and establishes relationships between them. It also populates the tables with data like skills, people's information(id, name, etc), and roles.

## Crows-foot diagram

The Crows-foot diagram shows a many-to-many relationship between people and skills and a many-to-many relationship between people and roles. This means that people can have multiple skills and be assigned multiple roles within the company, and different people can share the same skills or roles. These relationships are essential for capturing the collective skills and roles of individuals in the company, which is the primary purpose of the database.

```{mermaid}
erDiagram
    PEOPLE }|--|{ SKILLS : have
    PEOPLE {
        int id
        varchar first_name
        varchar last_name
        varchar email
        varchar linkedin_url
        varchar headshot_url
        varchar discord_handle
        varchar brief_bio
        date date_joined
    }
    SKILLS{
        int id
        varchar name
        varchar description
        varchar url
        varchar tag 
        int time_commitment
    }
    PEOPLE}|--|{ROLES : "also have"
    ROLES{
        int id
        varchar name
        int sort_priority
    }
    
```

## Examples of data in the database

### People table

The *people* table contains elements that describe each individual in the company. Each person has an id, first_name, last_name, email, linkedin_url, headshot_url, discord_handle, brief_bio, date_joined. For this table id, last_name and date_joined cannot be null, hence the "NOT NULL" statement. If an attribute does not have "NOT NULL", then it can default to NULL.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the experience of the people in the company. Each skill has an id, name, description, tag(catgory grouping for skill), url, and time_commitment(how much time is required for said skill). In the skills table, id, name, description and tag cannot be NULL, hence the "NOT NULL" statement. If an attribute does not have "NOT NULL", then it can default to NULL.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describes the job/role of the people in the company. Each role has an id, name(designer, developer, etc), and sort_priority which is an integer data type and used to provide an oder for sorting roles.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name


```{python}
sql = f"""
select name, tag, description
from skills
order by name;
"""
```



```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
select first_name, last_name, email
from people
order by last_name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List skill names of Person 1
```{python}
sql = f"""
select s.name
from peopleskills AS ps
join skills AS s ON ps.skills_id = s.id
where ps.people_id = 1;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List people names with Skill 6
```{python}
sql = f"""
select p.first_name, p.last_name
from people p
join peopleskills ps ON p.id = ps.people_id
join skills s ON ps.skills_id = s.id
where s.id = 6;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
sql = f"""
select p.first_name, p.last_name
from people p
join peopleroles pr ON p.id = pr.people_id
join roles r ON pr.role_id = r.id
where r.name = "Developer";
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
sql = f"""
select p.first_name, p.last_name, p.email 
from people p where not exists (select 1 from peopleskills ps where p.id = ps.people_id);
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills
```{python}
sql = f"""
select s.name, s.tag
from skills s where not exists (select 1 from peopleskills ps where s.id = ps.skills_id);
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List people names and skill names with the BOSS role
```{python}
sql = f"""
select p.first_name, p.last_name, s.name from people p
join peopleroles pr ON p.id = pr.people_id
join roles r ON pr.role_id = r.id
left join peopleskills ps ON p.id = ps.people_id
left join skills s ON ps.skills_id = s.id
where r.name = "Boss";
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles
```{python}
sql = f"""
select r.id, r.name
from roles r where not exists (select 1 from peopleroles pr where r.id = pr.role_id);
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection
This assignment was not too bad. The precise descriptions about each section made it easy to understand. I had a few moments where I did not quite get what was being asked but that was honestly because I was rushing or not reading the prompt thoroughly. This assignment has also given me more exposure to SQL. I noticed some SQL statements struggled to implement like the JOIN statements, so I will spend some time outside of class to practice. Overall, I think this assignment was quite manageable.

